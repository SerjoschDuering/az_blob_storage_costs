{"ast":null,"code":"var _jsxFileName = \"/Users/Joo/01_Projects/blob_costs/src/components/CostChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, FormControl, Select, MenuItem, InputLabel, Stack, TextField, ToggleButtonGroup, ToggleButton, FormControlLabel, Switch, Chip, Divider } from '@mui/material';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useScenariosContext } from '../contexts/ScenariosContext';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler);\nconst CostChart = () => {\n  _s();\n  const {\n    scenarios,\n    calculatedData,\n    monthRange,\n    updateMonthRange,\n    activeScenarioId\n  } = useScenariosContext();\n  const [chartType, setChartType] = useState('line');\n  const [dataType, setDataType] = useState('monthly');\n  const [showCostBreakdown, setShowCostBreakdown] = useState(false);\n  const activeScenario = scenarios.find(s => s.id === activeScenarioId);\n  const visibleScenarios = scenarios.filter(s => s.isVisible);\n\n  // Reset breakdown view if the active scenario changes or becomes invalid\n  useEffect(() => {\n    if (!activeScenario || !showCostBreakdown) {\n      setShowCostBreakdown(false);\n    }\n  }, [activeScenarioId, showCostBreakdown, activeScenario]);\n  const handleChartTypeChange = (_, newType) => {\n    if (newType !== null) setChartType(newType);\n  };\n  const handleDataTypeChange = (_, newType) => {\n    if (newType !== null) {\n      setDataType(newType);\n      // Automatically switch off breakdown if changing to cumulative\n      if (newType === 'cumulative') {\n        setShowCostBreakdown(false);\n      }\n    }\n  };\n  const handleMonthRangeChange = event => {\n    updateMonthRange(Number(event.target.value));\n  };\n  const handleBreakdownToggle = event => {\n    setShowCostBreakdown(event.target.checked);\n    // If showing breakdown, ensure chart type is 'bar' and data type is 'monthly'\n    if (event.target.checked) {\n      setChartType('bar');\n      setDataType('monthly');\n    }\n  };\n  const getChartData = () => {\n    const labels = Array.from({\n      length: monthRange\n    }, (_, i) => `Month ${i + 1}`);\n\n    // --- Cost Breakdown View (for active scenario) ---\n    if (showCostBreakdown && activeScenario && calculatedData[activeScenario.id]) {\n      const scenarioData = calculatedData[activeScenario.id].monthlyData;\n      if (!scenarioData) return {\n        labels: [],\n        datasets: []\n      }; // Should not happen if activeScenario exists\n\n      // Ensure data arrays have correct length matching monthRange\n      const trimData = dataArray => (dataArray === null || dataArray === void 0 ? void 0 : dataArray.slice(0, monthRange)) || [];\n      return {\n        labels,\n        datasets: [{\n          label: 'Hot Storage',\n          data: trimData(scenarioData.storageHotCosts),\n          backgroundColor: 'rgba(255, 99, 132, 0.6)',\n          // Reddish\n          stack: 'Storage' // Stack storage types\n        }, {\n          label: 'Cool Storage',\n          data: trimData(scenarioData.storageCoolCosts),\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          // Blueish\n          stack: 'Storage'\n        }, {\n          label: 'Archive Storage',\n          data: trimData(scenarioData.storageArchiveCosts),\n          backgroundColor: 'rgba(153, 102, 255, 0.6)',\n          // Purplish\n          stack: 'Storage'\n        }, {\n          label: 'Read Transactions',\n          data: trimData(scenarioData.transactionReadCosts),\n          backgroundColor: 'rgba(255, 206, 86, 0.6)',\n          // Yellowish\n          stack: 'Transactions' // Stack transaction types\n        }, {\n          label: 'Write Transactions',\n          data: trimData(scenarioData.transactionWriteCosts),\n          backgroundColor: 'rgba(255, 159, 64, 0.6)',\n          // Orangish\n          stack: 'Transactions'\n        }, {\n          label: 'Outbound Transfer',\n          data: trimData(scenarioData.outboundCosts),\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          // Tealish\n          stack: 'Transfer' // Separate stack\n        }]\n      };\n    }\n    // --- Scenario Comparison View ---\n    else {\n      const datasets = visibleScenarios.map(scenario => {\n        var _scenarioData$monthly;\n        const scenarioData = calculatedData[scenario.id];\n        if (!scenarioData) return null;\n        const data = dataType === 'cumulative' ? scenarioData.cumulativeTotalCosts : ((_scenarioData$monthly = scenarioData.monthlyData) === null || _scenarioData$monthly === void 0 ? void 0 : _scenarioData$monthly.totalCosts) || []; // Added optional chaining\n\n        return {\n          label: scenario.name,\n          data: data.slice(0, monthRange),\n          // Ensure data length matches monthRange\n          borderColor: scenario.color,\n          backgroundColor: `${scenario.color}66`,\n          // Slightly more opaque for area fill\n          borderWidth: scenario.id === activeScenarioId ? 3 : 1.5,\n          pointRadius: scenario.id === activeScenarioId ? 4 : 2,\n          pointHoverRadius: scenario.id === activeScenarioId ? 6 : 4,\n          fill: chartType === 'area',\n          tension: 0.1 // Smoother lines\n        };\n      }).filter(Boolean); // Filter out null datasets if data is missing\n\n      return {\n        labels,\n        datasets\n      };\n    }\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      // Better tooltips\n      mode: 'index',\n      intersect: false\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Cost (â‚¬ EUR)'\n        },\n        stacked: showCostBreakdown // Enable stacking only for breakdown view\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Month'\n        },\n        stacked: showCostBreakdown // Enable stacking only for breakdown view\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'bottom',\n        // Move legend to bottom\n        labels: {\n          boxWidth: 12,\n          padding: 15\n        }\n      },\n      title: {\n        display: true,\n        text: showCostBreakdown && activeScenario ? `Cost Breakdown: ${activeScenario.name}` : `Storage Costs Comparison (${dataType === 'cumulative' ? 'Cumulative' : 'Monthly'})`,\n        font: {\n          size: 16\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += new Intl.NumberFormat('de-DE', {\n                style: 'currency',\n                currency: 'EUR'\n              }).format(context.parsed.y);\n            }\n            return label;\n          }\n        }\n      }\n    }\n  };\n  const chartData = getChartData();\n  const ChartComponent = chartType === 'bar' || showCostBreakdown ? Bar : Line;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    elevation: 2,\n    sx: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      sx: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        p: 2,\n        '&:last-child': {\n          pb: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        spacing: 2,\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"h2\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"Cost Projection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          size: \"small\",\n          sx: {\n            minWidth: 120\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"month-range-label\",\n            children: \"Months\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"month-range-label\",\n            value: monthRange,\n            label: \"Months\",\n            onChange: handleMonthRangeChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 12,\n              children: \"12 Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 24,\n              children: \"24 Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 36,\n              children: \"36 Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 48,\n              children: \"48 Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 60,\n              children: \"60 Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: {\n          xs: 'column',\n          sm: 'row'\n        },\n        spacing: 2,\n        alignItems: {\n          xs: 'flex-start',\n          sm: 'center'\n        },\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          value: chartType,\n          exclusive: true,\n          onChange: handleChartTypeChange,\n          \"aria-label\": \"chart type\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"line\",\n            \"aria-label\": \"line chart\",\n            children: \"Line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"bar\",\n            \"aria-label\": \"bar chart\",\n            children: \"Bar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"area\",\n            \"aria-label\": \"area chart\",\n            children: \"Area\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          value: dataType,\n          exclusive: true,\n          onChange: handleDataTypeChange,\n          \"aria-label\": \"data type\",\n          size: \"small\",\n          disabled: showCostBreakdown,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"monthly\",\n            \"aria-label\": \"monthly costs\",\n            children: \"Monthly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: \"cumulative\",\n            \"aria-label\": \"cumulative costs\",\n            children: \"Cumulative\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: showCostBreakdown,\n            onChange: handleBreakdownToggle,\n            disabled: !activeScenario || dataType === 'cumulative'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 14\n          }, this),\n          label: \"Cost Breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), showCostBreakdown && activeScenario && /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        spacing: 1,\n        mb: 1,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: \"Showing breakdown for:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: activeScenario.name,\n          size: \"small\",\n          sx: {\n            bgcolor: `${activeScenario.color}22`,\n            borderLeft: `3px solid ${activeScenario.color}`,\n            borderRadius: '4px',\n            px: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1,\n          height: {\n            xs: '300px',\n            sm: '400px',\n            md: '100%'\n          },\n          minHeight: '300px',\n          position: 'relative',\n          border: '1px solid rgba(0,0,0,0.08)',\n          borderRadius: 1,\n          p: 1\n        },\n        children: visibleScenarios.length === 0 ? /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"text.secondary\",\n            children: \"No visible scenarios to display. Create a scenario and make it visible to view the chart.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 14\n        }, this) : chartType === 'bar' ? /*#__PURE__*/_jsxDEV(Bar, {\n          data: getChartData(),\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 16\n        }, this) : /*#__PURE__*/_jsxDEV(Line, {\n          data: getChartData(),\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(CostChart, \"EWS9qXDWc7subqAE+QkMY/nVj6Y=\", false, function () {\n  return [useScenariosContext];\n});\n_c = CostChart;\nexport default CostChart;\nvar _c;\n$RefreshReg$(_c, \"CostChart\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Typography","FormControl","Select","MenuItem","InputLabel","Stack","TextField","ToggleButtonGroup","ToggleButton","FormControlLabel","Switch","Chip","Divider","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","Line","Bar","useScenariosContext","jsxDEV","_jsxDEV","register","CostChart","_s","scenarios","calculatedData","monthRange","updateMonthRange","activeScenarioId","chartType","setChartType","dataType","setDataType","showCostBreakdown","setShowCostBreakdown","activeScenario","find","s","id","visibleScenarios","filter","isVisible","handleChartTypeChange","_","newType","handleDataTypeChange","handleMonthRangeChange","event","Number","target","value","handleBreakdownToggle","checked","getChartData","labels","Array","from","length","i","scenarioData","monthlyData","datasets","trimData","dataArray","slice","label","data","storageHotCosts","backgroundColor","stack","storageCoolCosts","storageArchiveCosts","transactionReadCosts","transactionWriteCosts","outboundCosts","map","scenario","_scenarioData$monthly","cumulativeTotalCosts","totalCosts","name","borderColor","color","borderWidth","pointRadius","pointHoverRadius","fill","tension","Boolean","chartOptions","responsive","maintainAspectRatio","interaction","mode","intersect","scales","y","beginAtZero","title","display","text","stacked","x","plugins","legend","position","boxWidth","padding","font","size","tooltip","callbacks","context","dataset","parsed","Intl","NumberFormat","style","currency","format","chartData","ChartComponent","elevation","sx","height","flexDirection","width","children","p","pb","direction","alignItems","spacing","mb","variant","component","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","minWidth","labelId","onChange","xs","sm","exclusive","disabled","control","bgcolor","borderLeft","borderRadius","px","md","minHeight","border","justifyContent","options","_c","$RefreshReg$"],"sources":["/Users/Joo/01_Projects/blob_costs/src/components/CostChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Card, \n  CardContent, \n  Typography, \n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Stack,\n  TextField,\n  ToggleButtonGroup,\n  ToggleButton,\n  FormControlLabel,\n  Switch,\n  Chip,\n  Divider\n} from '@mui/material';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useScenariosContext } from '../contexts/ScenariosContext';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst CostChart = () => {\n  const { scenarios, calculatedData, monthRange, updateMonthRange, activeScenarioId } = useScenariosContext();\n  const [chartType, setChartType] = useState('line');\n  const [dataType, setDataType] = useState('monthly');\n  const [showCostBreakdown, setShowCostBreakdown] = useState(false);\n  \n  const activeScenario = scenarios.find(s => s.id === activeScenarioId);\n  const visibleScenarios = scenarios.filter(s => s.isVisible);\n  \n  // Reset breakdown view if the active scenario changes or becomes invalid\n  useEffect(() => {\n    if (!activeScenario || !showCostBreakdown) {\n        setShowCostBreakdown(false);\n    }\n  }, [activeScenarioId, showCostBreakdown, activeScenario]);\n  \n  const handleChartTypeChange = (_, newType) => {\n    if (newType !== null) setChartType(newType);\n  };\n  \n  const handleDataTypeChange = (_, newType) => {\n    if (newType !== null) {\n       setDataType(newType);\n       // Automatically switch off breakdown if changing to cumulative\n       if (newType === 'cumulative') {\n          setShowCostBreakdown(false);\n       }\n    }\n  };\n  \n  const handleMonthRangeChange = (event) => {\n    updateMonthRange(Number(event.target.value));\n  };\n  \n  const handleBreakdownToggle = (event) => {\n     setShowCostBreakdown(event.target.checked);\n     // If showing breakdown, ensure chart type is 'bar' and data type is 'monthly'\n     if (event.target.checked) {\n       setChartType('bar');\n       setDataType('monthly');\n     }\n  };\n  \n  const getChartData = () => {\n    const labels = Array.from({ length: monthRange }, (_, i) => `Month ${i + 1}`);\n    \n    // --- Cost Breakdown View (for active scenario) ---\n    if (showCostBreakdown && activeScenario && calculatedData[activeScenario.id]) {\n      const scenarioData = calculatedData[activeScenario.id].monthlyData;\n      \n      if (!scenarioData) return { labels: [], datasets: [] }; // Should not happen if activeScenario exists\n\n      // Ensure data arrays have correct length matching monthRange\n      const trimData = (dataArray) => dataArray?.slice(0, monthRange) || [];\n\n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Hot Storage',\n            data: trimData(scenarioData.storageHotCosts),\n            backgroundColor: 'rgba(255, 99, 132, 0.6)', // Reddish\n            stack: 'Storage', // Stack storage types\n          },\n           {\n            label: 'Cool Storage',\n            data: trimData(scenarioData.storageCoolCosts),\n            backgroundColor: 'rgba(54, 162, 235, 0.6)', // Blueish\n            stack: 'Storage',\n          },\n           {\n            label: 'Archive Storage',\n            data: trimData(scenarioData.storageArchiveCosts),\n            backgroundColor: 'rgba(153, 102, 255, 0.6)', // Purplish\n            stack: 'Storage',\n          },\n           {\n            label: 'Read Transactions',\n            data: trimData(scenarioData.transactionReadCosts),\n            backgroundColor: 'rgba(255, 206, 86, 0.6)', // Yellowish\n            stack: 'Transactions', // Stack transaction types\n          },\n           {\n            label: 'Write Transactions',\n            data: trimData(scenarioData.transactionWriteCosts),\n            backgroundColor: 'rgba(255, 159, 64, 0.6)', // Orangish\n            stack: 'Transactions',\n          },\n          {\n            label: 'Outbound Transfer',\n            data: trimData(scenarioData.outboundCosts),\n            backgroundColor: 'rgba(75, 192, 192, 0.6)', // Tealish\n            stack: 'Transfer', // Separate stack\n          },\n        ],\n      };\n    } \n    // --- Scenario Comparison View ---\n    else {\n      const datasets = visibleScenarios.map(scenario => {\n        const scenarioData = calculatedData[scenario.id];\n        if (!scenarioData) return null;\n\n        const data = dataType === 'cumulative'\n          ? scenarioData.cumulativeTotalCosts\n          : scenarioData.monthlyData?.totalCosts || []; // Added optional chaining\n\n        return {\n          label: scenario.name,\n          data: data.slice(0, monthRange), // Ensure data length matches monthRange\n          borderColor: scenario.color,\n          backgroundColor: `${scenario.color}66`, // Slightly more opaque for area fill\n          borderWidth: scenario.id === activeScenarioId ? 3 : 1.5,\n          pointRadius: scenario.id === activeScenarioId ? 4 : 2,\n          pointHoverRadius: scenario.id === activeScenarioId ? 6 : 4,\n          fill: chartType === 'area',\n          tension: 0.1, // Smoother lines\n        };\n      }).filter(Boolean); // Filter out null datasets if data is missing\n\n      return { labels, datasets };\n    }\n  };\n  \n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: { // Better tooltips\n       mode: 'index',\n       intersect: false,\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: { display: true, text: 'Cost (â‚¬ EUR)' },\n         stacked: showCostBreakdown, // Enable stacking only for breakdown view\n      },\n      x: {\n        title: { display: true, text: 'Month' },\n         stacked: showCostBreakdown, // Enable stacking only for breakdown view\n      },\n    },\n    plugins: {\n      legend: {\n        position: 'bottom', // Move legend to bottom\n         labels: {\n            boxWidth: 12,\n            padding: 15,\n         }\n      },\n      title: {\n        display: true,\n        text: showCostBreakdown && activeScenario\n          ? `Cost Breakdown: ${activeScenario.name}`\n          : `Storage Costs Comparison (${dataType === 'cumulative' ? 'Cumulative' : 'Monthly'})`,\n         font: { size: 16 }\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n             let label = context.dataset.label || '';\n             if (label) {\n                label += ': ';\n             }\n             if (context.parsed.y !== null) {\n                label += new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(context.parsed.y);\n             }\n             return label;\n          }\n        }\n      }\n    },\n  };\n  \n  const chartData = getChartData();\n  const ChartComponent = chartType === 'bar' || showCostBreakdown ? Bar : Line;\n  \n  return (\n    <Card elevation={2} sx={{ \n      height: '100%', \n      display: 'flex', \n      flexDirection: 'column', \n      width: '100%' \n    }}>\n      <CardContent sx={{ \n        height: '100%', \n        display: 'flex', \n        flexDirection: 'column',\n        p: 2,\n        '&:last-child': { \n          pb: 2 \n        }\n      }}>\n        {/* Chart Header with Options */}\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2} mb={2}>\n          <Typography variant=\"h6\" component=\"h2\" sx={{ flexGrow: 1 }}>\n            Cost Projection\n          </Typography>\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel id=\"month-range-label\">Months</InputLabel>\n            <Select\n              labelId=\"month-range-label\"\n              value={monthRange}\n              label=\"Months\"\n              onChange={handleMonthRangeChange}\n            >\n              <MenuItem value={12}>12 Months</MenuItem>\n              <MenuItem value={24}>24 Months</MenuItem>\n              <MenuItem value={36}>36 Months</MenuItem>\n              <MenuItem value={48}>48 Months</MenuItem>\n              <MenuItem value={60}>60 Months</MenuItem>\n            </Select>\n          </FormControl>\n        </Stack>\n        \n        {/* Toggle Options */}\n        <Stack \n          direction={{ xs: 'column', sm: 'row' }} \n          spacing={2} \n          alignItems={{ xs: 'flex-start', sm: 'center' }}\n          mb={2}\n        >\n         <ToggleButtonGroup\n           value={chartType}\n           exclusive\n           onChange={handleChartTypeChange}\n           aria-label=\"chart type\"\n           size=\"small\"\n         >\n           <ToggleButton value=\"line\" aria-label=\"line chart\">\n             Line\n           </ToggleButton>\n           <ToggleButton value=\"bar\" aria-label=\"bar chart\">\n             Bar\n           </ToggleButton>\n           <ToggleButton value=\"area\" aria-label=\"area chart\">\n             Area\n           </ToggleButton>\n         </ToggleButtonGroup>\n          \n         <ToggleButtonGroup\n           value={dataType}\n           exclusive\n           onChange={handleDataTypeChange}\n           aria-label=\"data type\"\n           size=\"small\"\n           disabled={showCostBreakdown}\n         >\n           <ToggleButton value=\"monthly\" aria-label=\"monthly costs\">\n             Monthly\n           </ToggleButton>\n           <ToggleButton value=\"cumulative\" aria-label=\"cumulative costs\">\n             Cumulative\n           </ToggleButton>\n         </ToggleButtonGroup>\n          \n         <FormControlLabel\n           control={\n             <Switch \n               checked={showCostBreakdown} \n               onChange={handleBreakdownToggle}\n               disabled={!activeScenario || dataType === 'cumulative'} \n             />\n           }\n           label=\"Cost Breakdown\"\n         />\n        </Stack>\n          \n        {/* Active Scenario Chip */}\n        {showCostBreakdown && activeScenario && (\n           <Stack direction=\"row\" alignItems=\"center\" spacing={1} mb={1}>\n             <Typography variant=\"body2\">Showing breakdown for:</Typography>\n             <Chip \n               label={activeScenario.name}\n               size=\"small\"\n               sx={{ \n                 bgcolor: `${activeScenario.color}22`,\n                 borderLeft: `3px solid ${activeScenario.color}`, \n                 borderRadius: '4px',\n                 px: 1\n               }}\n             />\n           </Stack>\n        )}\n          \n        {/* Chart Container - Flexbox to take remaining height */}\n        <Box sx={{ \n          flexGrow: 1, \n          height: { xs: '300px', sm: '400px', md: '100%' }, \n          minHeight: '300px', \n          position: 'relative',\n          border: '1px solid rgba(0,0,0,0.08)',\n          borderRadius: 1,\n          p: 1\n        }}>\n          {visibleScenarios.length === 0 ? (\n             <Box sx={{ \n               display: 'flex', \n               alignItems: 'center', \n               justifyContent: 'center', \n               height: '100%' \n             }}>\n               <Typography color=\"text.secondary\">\n                 No visible scenarios to display. Create a scenario and make it visible to view the chart.\n               </Typography>\n             </Box>\n          ) : (\n             chartType === 'bar' ? (\n               <Bar data={getChartData()} options={chartOptions} />\n             ) : (\n               <Line data={getChartData()} options={chartOptions} />\n             )\n          )}\n        </Box>\n          \n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CostChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}