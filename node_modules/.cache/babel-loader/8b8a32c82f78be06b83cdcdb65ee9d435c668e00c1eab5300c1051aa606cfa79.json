{"ast":null,"code":"// Azure Blob Storage pricing constants (in EUR)\nconst PRICING = {\n  storage: {\n    hotTier: 0.02,\n    // EUR per GB per month\n    coolTier: 0.012,\n    // EUR per GB per month\n    archiveTier: 0.001 // EUR per GB per month\n  },\n  transactions: {\n    write: {\n      hotTier: 0.05 / 10000,\n      // EUR per 10,000 operations\n      coolTier: 0.10 / 10000 // EUR per 10,000 operations\n    },\n    read: {\n      hotTier: 0.004 / 10000,\n      // EUR per 10,000 operations\n      coolTier: 0.01 / 10000 // EUR per 10,000 operations\n    }\n  },\n  dataTransfer: {\n    freeLimit: 100,\n    // GB per month\n    costPerGB: 0.087 // EUR per GB\n  }\n};\n\n/**\n * Calculate Azure Blob Storage costs based on scenario parameters\n * @param {Object} params - Scenario parameters\n * @param {number} monthsToCalculate - Number of months to calculate costs for\n * @returns {Object} Monthly costs and aggregated costs\n */\nexport const calculateCosts = (params, monthsToCalculate = 24) => {\n  const {\n    numUsers,\n    projectsPerUserPerMonth,\n    imagesPerProject,\n    thumbnailSizeMB,\n    mediumSizeMB,\n    hdSizeMB,\n    hdImagesPerProject,\n    getsPerImageInFirstMonth,\n    hotTierMonths,\n    coolTierMonths,\n    archiveTierMonths\n  } = params;\n\n  // Calculate base numbers for a single project\n  const projectSizeGB = (imagesPerProject * thumbnailSizeMB +\n  // Thumbnails\n  imagesPerProject * mediumSizeMB +\n  // Medium images\n  hdImagesPerProject * hdSizeMB // HD images\n  ) / 1024; // Convert MB to GB\n\n  // Calculate GET operations and outbound data for a single project in its first month\n  const getOperationsPerProject = imagesPerProject * getsPerImageInFirstMonth;\n\n  // Assuming average image size for outbound\n  const avgImageSizeMB = (thumbnailSizeMB * imagesPerProject + mediumSizeMB * imagesPerProject + hdSizeMB * hdImagesPerProject) / (imagesPerProject * 2 + hdImagesPerProject); // All images + versions\n\n  const outboundGBPerProject = getOperationsPerProject * avgImageSizeMB / 1024;\n\n  // Monthly data\n  const monthlyCosts = [];\n  const monthlyData = {\n    projectCount: [],\n    storageCosts: [],\n    transactionCosts: [],\n    outboundCosts: [],\n    totalCosts: []\n  };\n  let cumulativeProjectCount = 0;\n\n  // Calculate costs for each month\n  for (let month = 1; month <= monthsToCalculate; month++) {\n    // New projects this month\n    const newProjectsThisMonth = numUsers * projectsPerUserPerMonth;\n    cumulativeProjectCount += newProjectsThisMonth;\n\n    // Track projects by tier\n    let hotTierProjects = 0;\n    let coolTierProjects = 0;\n    let archiveTierProjects = 0;\n\n    // Distribute existing projects into tiers\n    for (let pastMonth = 1; pastMonth <= month; pastMonth++) {\n      const projectsFromPastMonth = numUsers * projectsPerUserPerMonth;\n      const ageInMonths = month - pastMonth + 1;\n      if (ageInMonths <= hotTierMonths) {\n        hotTierProjects += projectsFromPastMonth;\n      } else if (ageInMonths <= hotTierMonths + coolTierMonths) {\n        coolTierProjects += projectsFromPastMonth;\n      } else if (ageInMonths <= hotTierMonths + coolTierMonths + archiveTierMonths) {\n        archiveTierProjects += projectsFromPastMonth;\n      }\n      // Projects older than all tiers combined are assumed to be deleted\n    }\n\n    // Calculate storage costs\n    const hotTierStorageCost = hotTierProjects * projectSizeGB * PRICING.storage.hotTier;\n    const coolTierStorageCost = coolTierProjects * projectSizeGB * PRICING.storage.coolTier;\n    const archiveTierStorageCost = archiveTierProjects * projectSizeGB * PRICING.storage.archiveTier;\n    const totalStorageCost = hotTierStorageCost + coolTierStorageCost + archiveTierStorageCost;\n\n    // Calculate transaction costs (only for hot and cool tiers, assuming archive doesn't get transactions)\n    // Only new projects and hot tier projects get GET operations\n    const getOperations = newProjectsThisMonth * getOperationsPerProject;\n    const getTransactionCost = getOperations * PRICING.transactions.read.hotTier;\n\n    // New projects need write operations\n    const writeOperations = newProjectsThisMonth * imagesPerProject * 2; // Assume 2 writes per image (original + metadata)\n    const writeTransactionCost = writeOperations * PRICING.transactions.write.hotTier;\n    const totalTransactionCost = getTransactionCost + writeTransactionCost;\n\n    // Calculate outbound data costs\n    const outboundGB = newProjectsThisMonth * outboundGBPerProject;\n    const freeOutboundGB = Math.min(PRICING.dataTransfer.freeLimit, outboundGB);\n    const billableOutboundGB = Math.max(0, outboundGB - freeOutboundGB);\n    const outboundCost = billableOutboundGB * PRICING.dataTransfer.costPerGB;\n\n    // Total cost for this month\n    const totalMonthCost = totalStorageCost + totalTransactionCost + outboundCost;\n\n    // Add to monthly data arrays\n    monthlyData.projectCount.push(cumulativeProjectCount);\n    monthlyData.storageCosts.push(totalStorageCost);\n    monthlyData.transactionCosts.push(totalTransactionCost);\n    monthlyData.outboundCosts.push(outboundCost);\n    monthlyData.totalCosts.push(totalMonthCost);\n\n    // Add detailed data to monthlyCosts array\n    monthlyCosts.push({\n      month,\n      projects: {\n        total: cumulativeProjectCount,\n        newProjects: newProjectsThisMonth,\n        hotTier: hotTierProjects,\n        coolTier: coolTierProjects,\n        archiveTier: archiveTierProjects\n      },\n      storage: {\n        hotTierCost: hotTierStorageCost,\n        coolTierCost: coolTierStorageCost,\n        archiveTierCost: archiveTierStorageCost,\n        totalCost: totalStorageCost\n      },\n      transactions: {\n        getOperations,\n        writeOperations,\n        getTransactionCost,\n        writeTransactionCost,\n        totalCost: totalTransactionCost\n      },\n      outbound: {\n        totalGB: outboundGB,\n        freeGB: freeOutboundGB,\n        billableGB: billableOutboundGB,\n        totalCost: outboundCost\n      },\n      totalCost: totalMonthCost\n    });\n  }\n\n  // Calculate cumulative data for total costs\n  const cumulativeTotalCosts = [];\n  let cumulativeTotal = 0;\n  for (const cost of monthlyData.totalCosts) {\n    cumulativeTotal += cost;\n    cumulativeTotalCosts.push(cumulativeTotal);\n  }\n  return {\n    monthlyCosts,\n    monthlyData,\n    cumulativeTotalCosts\n  };\n};","map":{"version":3,"names":["PRICING","storage","hotTier","coolTier","archiveTier","transactions","write","read","dataTransfer","freeLimit","costPerGB","calculateCosts","params","monthsToCalculate","numUsers","projectsPerUserPerMonth","imagesPerProject","thumbnailSizeMB","mediumSizeMB","hdSizeMB","hdImagesPerProject","getsPerImageInFirstMonth","hotTierMonths","coolTierMonths","archiveTierMonths","projectSizeGB","getOperationsPerProject","avgImageSizeMB","outboundGBPerProject","monthlyCosts","monthlyData","projectCount","storageCosts","transactionCosts","outboundCosts","totalCosts","cumulativeProjectCount","month","newProjectsThisMonth","hotTierProjects","coolTierProjects","archiveTierProjects","pastMonth","projectsFromPastMonth","ageInMonths","hotTierStorageCost","coolTierStorageCost","archiveTierStorageCost","totalStorageCost","getOperations","getTransactionCost","writeOperations","writeTransactionCost","totalTransactionCost","outboundGB","freeOutboundGB","Math","min","billableOutboundGB","max","outboundCost","totalMonthCost","push","projects","total","newProjects","hotTierCost","coolTierCost","archiveTierCost","totalCost","outbound","totalGB","freeGB","billableGB","cumulativeTotalCosts","cumulativeTotal","cost"],"sources":["/Users/Joo/01_Projects/blob_costs/src/utils/costCalculator.js"],"sourcesContent":["// Azure Blob Storage pricing constants (in EUR)\nconst PRICING = {\n  storage: {\n    hotTier: 0.02, // EUR per GB per month\n    coolTier: 0.012, // EUR per GB per month\n    archiveTier: 0.001, // EUR per GB per month\n  },\n  transactions: {\n    write: {\n      hotTier: 0.05 / 10000, // EUR per 10,000 operations\n      coolTier: 0.10 / 10000, // EUR per 10,000 operations\n    },\n    read: {\n      hotTier: 0.004 / 10000, // EUR per 10,000 operations\n      coolTier: 0.01 / 10000, // EUR per 10,000 operations\n    },\n  },\n  dataTransfer: {\n    freeLimit: 100, // GB per month\n    costPerGB: 0.087, // EUR per GB\n  },\n};\n\n/**\n * Calculate Azure Blob Storage costs based on scenario parameters\n * @param {Object} params - Scenario parameters\n * @param {number} monthsToCalculate - Number of months to calculate costs for\n * @returns {Object} Monthly costs and aggregated costs\n */\nexport const calculateCosts = (params, monthsToCalculate = 24) => {\n  const {\n    numUsers,\n    projectsPerUserPerMonth,\n    imagesPerProject,\n    thumbnailSizeMB,\n    mediumSizeMB,\n    hdSizeMB,\n    hdImagesPerProject,\n    getsPerImageInFirstMonth,\n    hotTierMonths,\n    coolTierMonths,\n    archiveTierMonths,\n  } = params;\n\n  // Calculate base numbers for a single project\n  const projectSizeGB = (\n    (imagesPerProject * thumbnailSizeMB + // Thumbnails\n     imagesPerProject * mediumSizeMB +    // Medium images\n     hdImagesPerProject * hdSizeMB)       // HD images\n  ) / 1024; // Convert MB to GB\n  \n  // Calculate GET operations and outbound data for a single project in its first month\n  const getOperationsPerProject = imagesPerProject * getsPerImageInFirstMonth;\n  \n  // Assuming average image size for outbound\n  const avgImageSizeMB = (\n    (thumbnailSizeMB * imagesPerProject + \n     mediumSizeMB * imagesPerProject + \n     hdSizeMB * hdImagesPerProject) \n  ) / (imagesPerProject * 2 + hdImagesPerProject); // All images + versions\n  \n  const outboundGBPerProject = (getOperationsPerProject * avgImageSizeMB) / 1024;\n  \n  // Monthly data\n  const monthlyCosts = [];\n  const monthlyData = {\n    projectCount: [],\n    storageCosts: [],\n    transactionCosts: [],\n    outboundCosts: [],\n    totalCosts: [],\n  };\n  \n  let cumulativeProjectCount = 0;\n  \n  // Calculate costs for each month\n  for (let month = 1; month <= monthsToCalculate; month++) {\n    // New projects this month\n    const newProjectsThisMonth = numUsers * projectsPerUserPerMonth;\n    cumulativeProjectCount += newProjectsThisMonth;\n    \n    // Track projects by tier\n    let hotTierProjects = 0;\n    let coolTierProjects = 0;\n    let archiveTierProjects = 0;\n    \n    // Distribute existing projects into tiers\n    for (let pastMonth = 1; pastMonth <= month; pastMonth++) {\n      const projectsFromPastMonth = numUsers * projectsPerUserPerMonth;\n      const ageInMonths = month - pastMonth + 1;\n      \n      if (ageInMonths <= hotTierMonths) {\n        hotTierProjects += projectsFromPastMonth;\n      } else if (ageInMonths <= hotTierMonths + coolTierMonths) {\n        coolTierProjects += projectsFromPastMonth;\n      } else if (ageInMonths <= hotTierMonths + coolTierMonths + archiveTierMonths) {\n        archiveTierProjects += projectsFromPastMonth;\n      }\n      // Projects older than all tiers combined are assumed to be deleted\n    }\n    \n    // Calculate storage costs\n    const hotTierStorageCost = hotTierProjects * projectSizeGB * PRICING.storage.hotTier;\n    const coolTierStorageCost = coolTierProjects * projectSizeGB * PRICING.storage.coolTier;\n    const archiveTierStorageCost = archiveTierProjects * projectSizeGB * PRICING.storage.archiveTier;\n    const totalStorageCost = hotTierStorageCost + coolTierStorageCost + archiveTierStorageCost;\n    \n    // Calculate transaction costs (only for hot and cool tiers, assuming archive doesn't get transactions)\n    // Only new projects and hot tier projects get GET operations\n    const getOperations = newProjectsThisMonth * getOperationsPerProject;\n    const getTransactionCost = getOperations * PRICING.transactions.read.hotTier;\n    \n    // New projects need write operations\n    const writeOperations = newProjectsThisMonth * imagesPerProject * 2; // Assume 2 writes per image (original + metadata)\n    const writeTransactionCost = writeOperations * PRICING.transactions.write.hotTier;\n    \n    const totalTransactionCost = getTransactionCost + writeTransactionCost;\n    \n    // Calculate outbound data costs\n    const outboundGB = newProjectsThisMonth * outboundGBPerProject;\n    const freeOutboundGB = Math.min(PRICING.dataTransfer.freeLimit, outboundGB);\n    const billableOutboundGB = Math.max(0, outboundGB - freeOutboundGB);\n    const outboundCost = billableOutboundGB * PRICING.dataTransfer.costPerGB;\n    \n    // Total cost for this month\n    const totalMonthCost = totalStorageCost + totalTransactionCost + outboundCost;\n    \n    // Add to monthly data arrays\n    monthlyData.projectCount.push(cumulativeProjectCount);\n    monthlyData.storageCosts.push(totalStorageCost);\n    monthlyData.transactionCosts.push(totalTransactionCost);\n    monthlyData.outboundCosts.push(outboundCost);\n    monthlyData.totalCosts.push(totalMonthCost);\n    \n    // Add detailed data to monthlyCosts array\n    monthlyCosts.push({\n      month,\n      projects: {\n        total: cumulativeProjectCount,\n        newProjects: newProjectsThisMonth,\n        hotTier: hotTierProjects,\n        coolTier: coolTierProjects,\n        archiveTier: archiveTierProjects,\n      },\n      storage: {\n        hotTierCost: hotTierStorageCost,\n        coolTierCost: coolTierStorageCost,\n        archiveTierCost: archiveTierStorageCost,\n        totalCost: totalStorageCost,\n      },\n      transactions: {\n        getOperations,\n        writeOperations,\n        getTransactionCost,\n        writeTransactionCost,\n        totalCost: totalTransactionCost,\n      },\n      outbound: {\n        totalGB: outboundGB,\n        freeGB: freeOutboundGB,\n        billableGB: billableOutboundGB,\n        totalCost: outboundCost,\n      },\n      totalCost: totalMonthCost,\n    });\n  }\n  \n  // Calculate cumulative data for total costs\n  const cumulativeTotalCosts = [];\n  let cumulativeTotal = 0;\n  \n  for (const cost of monthlyData.totalCosts) {\n    cumulativeTotal += cost;\n    cumulativeTotalCosts.push(cumulativeTotal);\n  }\n  \n  return {\n    monthlyCosts,\n    monthlyData,\n    cumulativeTotalCosts,\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}