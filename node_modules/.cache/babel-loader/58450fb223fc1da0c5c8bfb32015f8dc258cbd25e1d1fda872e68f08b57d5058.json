{"ast":null,"code":"var _jsxFileName = \"/Users/Joo/01_Projects/blob_costs/src/contexts/ScenariosContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { calculateCosts } from '../utils/costCalculator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScenariosContext = /*#__PURE__*/createContext();\nexport const useScenariosContext = () => {\n  _s();\n  return useContext(ScenariosContext);\n};\n\n// Helper to generate distinct colors\n_s(useScenariosContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst generateColor = index => {\n  const colors = ['#0078d4',\n  // Azure blue\n  '#ff8c00',\n  // Orange\n  '#107c10',\n  // Green\n  '#773adc',\n  // Purple\n  '#d83b01',\n  // Red/Orange\n  '#00b7c3',\n  // Teal\n  '#50e6ff',\n  // Azure light blue\n  '#599b2d' // Green/Yellow\n  ];\n  return colors[index % colors.length];\n};\nexport const ScenariosProvider = ({\n  children\n}) => {\n  _s2();\n  const [scenarios, setScenarios] = useState(() => {\n    const savedScenarios = localStorage.getItem('blobCostScenarios');\n    const initialScenarios = savedScenarios ? JSON.parse(savedScenarios) : [{\n      id: 'default-scenario-1',\n      // Ensure unique ID if multiple defaults\n      name: 'Default Scenario',\n      description: 'Basic scenario with default parameters',\n      parameters: {\n        numUsers: 100,\n        projectsPerUserPerMonth: 4,\n        // --- Simplified Parameters ---\n        dataObjectsPerProject: 100,\n        avgDataObjectSizeMB: 0.9,\n        // Approx average based on old params\n        // ---------------------------\n        getsPerImageInFirstMonth: 15,\n        // Renaming this might be good later\n        hotTierMonths: 1,\n        coolTierMonths: 3,\n        archiveTierMonths: 9\n      },\n      // Default state for editing and visibility\n      isEditing: false,\n      isVisible: true\n    }];\n    // Ensure all loaded scenarios have default editing/visibility/color states\n    return initialScenarios.map((s, index) => ({\n      ...s,\n      isEditing: s.isEditing === true,\n      // Ensure boolean\n      isVisible: s.isVisible !== false,\n      // Default to true if undefined\n      color: s.color || generateColor(index) // Assign color if missing\n    }));\n  });\n  const [monthRange, setMonthRange] = useState(24);\n  const [calculatedData, setCalculatedData] = useState({});\n  const [activeScenarioId, setActiveScenarioId] = useState(() => {\n    // Set the first scenario as active initially\n    return scenarios.length > 0 ? scenarios[0].id : null;\n  });\n  useEffect(() => {\n    localStorage.setItem('blobCostScenarios', JSON.stringify(scenarios));\n    const newCalculatedData = {};\n    scenarios.forEach(scenario => {\n      if (scenario.parameters) {\n        // Check if parameters exist\n        newCalculatedData[scenario.id] = calculateCosts(scenario.parameters, monthRange);\n      }\n    });\n    setCalculatedData(newCalculatedData);\n  }, [scenarios, monthRange]);\n\n  // --- Scenario Management ---\n\n  const addScenario = () => {\n    const newScenario = {\n      id: uuidv4(),\n      name: `New Scenario ${scenarios.length + 1}`,\n      description: '',\n      parameters: {\n        // Default parameters for new scenarios\n        numUsers: 10,\n        projectsPerUserPerMonth: 3,\n        dataObjectsPerProject: 50,\n        avgDataObjectSizeMB: 1.0,\n        getsPerImageInFirstMonth: 10,\n        hotTierMonths: 1,\n        coolTierMonths: 3,\n        archiveTierMonths: 8 // Example different default\n      },\n      isEditing: true,\n      // Start in edit mode\n      isVisible: true,\n      color: generateColor(scenarios.length)\n    };\n    setScenarios(prev => [...prev, newScenario]);\n    setActiveScenarioId(newScenario.id); // Make the new one active\n  };\n  const updateScenario = (id, updates) => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      ...updates\n    } : scenario));\n  };\n  const updateScenarioParameter = (id, param, value) => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      parameters: {\n        ...scenario.parameters,\n        [param]: value\n      }\n    } : scenario));\n  };\n  const deleteScenario = id => {\n    setScenarios(prev => {\n      const remaining = prev.filter(scenario => scenario.id !== id);\n      // If the deleted scenario was active, set the first remaining one as active\n      if (activeScenarioId === id) {\n        setActiveScenarioId(remaining.length > 0 ? remaining[0].id : null);\n      }\n      return remaining;\n    });\n  };\n  const toggleScenarioVisibility = id => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      isVisible: !scenario.isVisible\n    } : scenario));\n  };\n  const toggleScenarioEdit = id => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      isEditing: !scenario.isEditing\n    } : scenario // Optionally close others: { ...scenario, isEditing: false }\n    ));\n  };\n\n  // --- Other ---\n\n  const updateMonthRange = range => {\n    setMonthRange(range);\n  };\n  const value = {\n    scenarios,\n    calculatedData,\n    monthRange,\n    activeScenarioId,\n    // Expose activeScenarioId\n    addScenario,\n    updateScenario,\n    updateScenarioParameter,\n    // Expose parameter update function\n    deleteScenario,\n    setActiveScenarioId,\n    // Expose setter for active scenario\n    toggleScenarioVisibility,\n    toggleScenarioEdit,\n    // Expose edit toggle function\n    updateMonthRange\n  };\n  return /*#__PURE__*/_jsxDEV(ScenariosContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s2(ScenariosProvider, \"MDa1KVkuDxcN6OL07qiSKJ4RvWs=\");\n_c = ScenariosProvider;\nvar _c;\n$RefreshReg$(_c, \"ScenariosProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","v4","uuidv4","calculateCosts","jsxDEV","_jsxDEV","ScenariosContext","useScenariosContext","_s","generateColor","index","colors","length","ScenariosProvider","children","_s2","scenarios","setScenarios","savedScenarios","localStorage","getItem","initialScenarios","JSON","parse","id","name","description","parameters","numUsers","projectsPerUserPerMonth","dataObjectsPerProject","avgDataObjectSizeMB","getsPerImageInFirstMonth","hotTierMonths","coolTierMonths","archiveTierMonths","isEditing","isVisible","map","s","color","monthRange","setMonthRange","calculatedData","setCalculatedData","activeScenarioId","setActiveScenarioId","setItem","stringify","newCalculatedData","forEach","scenario","addScenario","newScenario","prev","updateScenario","updates","updateScenarioParameter","param","value","deleteScenario","remaining","filter","toggleScenarioVisibility","toggleScenarioEdit","updateMonthRange","range","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Joo/01_Projects/blob_costs/src/contexts/ScenariosContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { calculateCosts } from '../utils/costCalculator';\n\nconst ScenariosContext = createContext();\n\nexport const useScenariosContext = () => useContext(ScenariosContext);\n\n// Helper to generate distinct colors\nconst generateColor = (index) => {\n  const colors = [\n    '#0078d4', // Azure blue\n    '#ff8c00', // Orange\n    '#107c10', // Green\n    '#773adc', // Purple\n    '#d83b01', // Red/Orange\n    '#00b7c3', // Teal\n    '#50e6ff', // Azure light blue\n    '#599b2d', // Green/Yellow\n  ];\n  return colors[index % colors.length];\n};\n\nexport const ScenariosProvider = ({ children }) => {\n  const [scenarios, setScenarios] = useState(() => {\n    const savedScenarios = localStorage.getItem('blobCostScenarios');\n    const initialScenarios = savedScenarios ? JSON.parse(savedScenarios) : [\n      {\n        id: 'default-scenario-1', // Ensure unique ID if multiple defaults\n        name: 'Default Scenario',\n        description: 'Basic scenario with default parameters',\n        parameters: {\n          numUsers: 100,\n          projectsPerUserPerMonth: 4,\n          // --- Simplified Parameters ---\n          dataObjectsPerProject: 100, \n          avgDataObjectSizeMB: 0.9, // Approx average based on old params\n          // ---------------------------\n          getsPerImageInFirstMonth: 15, // Renaming this might be good later\n          hotTierMonths: 1,\n          coolTierMonths: 3,\n          archiveTierMonths: 9,\n        },\n        // Default state for editing and visibility\n        isEditing: false, \n        isVisible: true, \n      }\n    ];\n    // Ensure all loaded scenarios have default editing/visibility/color states\n     return initialScenarios.map((s, index) => ({\n      ...s,\n      isEditing: s.isEditing === true, // Ensure boolean\n      isVisible: s.isVisible !== false, // Default to true if undefined\n      color: s.color || generateColor(index), // Assign color if missing\n    }));\n  });\n  \n  const [monthRange, setMonthRange] = useState(24);\n  const [calculatedData, setCalculatedData] = useState({});\n  const [activeScenarioId, setActiveScenarioId] = useState(() => {\n     // Set the first scenario as active initially\n    return scenarios.length > 0 ? scenarios[0].id : null;\n  });\n\n\n  useEffect(() => {\n    localStorage.setItem('blobCostScenarios', JSON.stringify(scenarios));\n    \n    const newCalculatedData = {};\n    scenarios.forEach(scenario => {\n       if (scenario.parameters) { // Check if parameters exist\n         newCalculatedData[scenario.id] = calculateCosts(scenario.parameters, monthRange);\n       }\n    });\n    setCalculatedData(newCalculatedData);\n  }, [scenarios, monthRange]);\n  \n  // --- Scenario Management ---\n\n  const addScenario = () => {\n    const newScenario = {\n      id: uuidv4(),\n      name: `New Scenario ${scenarios.length + 1}`,\n      description: '',\n      parameters: { // Default parameters for new scenarios\n         numUsers: 10,\n         projectsPerUserPerMonth: 3,\n         dataObjectsPerProject: 50, \n         avgDataObjectSizeMB: 1.0,\n         getsPerImageInFirstMonth: 10,\n         hotTierMonths: 1,\n         coolTierMonths: 3,\n         archiveTierMonths: 8, // Example different default\n      },\n      isEditing: true, // Start in edit mode\n      isVisible: true,\n      color: generateColor(scenarios.length),\n    };\n    \n    setScenarios(prev => [...prev, newScenario]);\n    setActiveScenarioId(newScenario.id); // Make the new one active\n  };\n  \n  const updateScenario = (id, updates) => {\n    setScenarios(prev => \n      prev.map(scenario => \n        scenario.id === id ? { ...scenario, ...updates } : scenario\n      )\n    );\n  };\n\n  const updateScenarioParameter = (id, param, value) => {\n     setScenarios(prev =>\n       prev.map(scenario =>\n         scenario.id === id\n           ? {\n               ...scenario,\n               parameters: {\n                 ...scenario.parameters,\n                 [param]: value,\n               },\n             }\n           : scenario\n       )\n     );\n  };\n  \n  const deleteScenario = (id) => {\n     setScenarios(prev => {\n       const remaining = prev.filter(scenario => scenario.id !== id);\n       // If the deleted scenario was active, set the first remaining one as active\n       if (activeScenarioId === id) {\n         setActiveScenarioId(remaining.length > 0 ? remaining[0].id : null);\n       }\n       return remaining;\n     });\n  };\n  \n  const toggleScenarioVisibility = (id) => {\n    setScenarios(prev => \n      prev.map(scenario => \n        scenario.id === id \n          ? { ...scenario, isVisible: !scenario.isVisible } \n          : scenario\n      )\n    );\n  };\n\n  const toggleScenarioEdit = (id) => {\n     setScenarios(prev =>\n       prev.map(scenario =>\n         scenario.id === id\n           ? { ...scenario, isEditing: !scenario.isEditing }\n           : scenario // Optionally close others: { ...scenario, isEditing: false }\n       )\n     );\n  };\n  \n  // --- Other ---\n\n  const updateMonthRange = (range) => {\n    setMonthRange(range);\n  };\n  \n  const value = {\n    scenarios,\n    calculatedData,\n    monthRange,\n    activeScenarioId, // Expose activeScenarioId\n    addScenario,\n    updateScenario,\n    updateScenarioParameter, // Expose parameter update function\n    deleteScenario,\n    setActiveScenarioId, // Expose setter for active scenario\n    toggleScenarioVisibility,\n    toggleScenarioEdit, // Expose edit toggle function\n    updateMonthRange\n  };\n  \n  return (\n    <ScenariosContext.Provider value={value}>\n      {children}\n    </ScenariosContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}