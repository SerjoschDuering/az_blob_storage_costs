{"ast":null,"code":"// Azure Blob Storage pricing constants (in EUR)\nexport const DEFAULT_PRICING = {\n  storage: {\n    hotTier: 0.02,\n    // EUR per GB per month\n    coolTier: 0.012,\n    // EUR per GB per month\n    archiveTier: 0.001 // EUR per GB per month\n  },\n  transactions: {\n    write: 0.05 / 10000,\n    // EUR per 10,000 operations (using Hot tier cost)\n    read: 0.004 / 10000 // EUR per 10,000 operations (using Hot tier cost)\n  },\n  dataTransfer: {\n    freeLimit: 100,\n    // GB per month\n    costPerGB: 0.087 // EUR per GB\n  }\n};\n\n/**\n * Calculate Azure Blob Storage costs based on scenario parameters\n * @param {Object} params - Scenario parameters\n * @param {number} monthsToCalculate - Number of months to calculate costs for\n * @param {Object} pricing - Optional custom pricing model (defaults to DEFAULT_PRICING)\n * @returns {Object} Monthly costs and aggregated costs\n */\nexport const calculateCosts = (params, monthsToCalculate = 24, pricing = DEFAULT_PRICING) => {\n  // --- Input Validation ---\n  if (!params) {\n    console.error(\"calculateCosts called with invalid parameters:\", params);\n    // Return default empty structure to prevent crashes downstream\n    return {\n      monthlyCosts: [],\n      monthlyData: {\n        storageCosts: [],\n        transactionCosts: [],\n        outboundCosts: [],\n        totalCosts: []\n      },\n      cumulativeTotalCosts: []\n    };\n  }\n  const {\n    numUsers = 0,\n    // Default values to prevent NaN errors\n    projectsPerUserPerMonth = 0,\n    // --- Simplified Parameters ---\n    dataObjectsPerProject = 0,\n    avgDataObjectSizeMB = 0,\n    // ---------------------------\n    getsPerImageInFirstMonth = 0,\n    // Consider renaming this parameter\n    hotTierMonths = 1,\n    coolTierMonths = 3,\n    archiveTierMonths = 9 // Use the value from params\n  } = params;\n\n  // Ensure tier months are non-negative integers\n  const validHotTierMonths = Math.max(1, Math.floor(hotTierMonths)); // Hot must be at least 1\n  const validCoolTierMonths = Math.max(0, Math.floor(coolTierMonths));\n  const validArchiveTierMonths = Math.max(0, Math.floor(archiveTierMonths));\n\n  // --- Calculations based on Simplified Parameters ---\n  const projectSizeGB = dataObjectsPerProject * avgDataObjectSizeMB / 1024;\n\n  // Calculate GET operations for a single project in its first month\n  // Note: 'getsPerImageInFirstMonth' needs context adjustment if it's per *object* now\n  const getOperationsPerProject = dataObjectsPerProject * getsPerImageInFirstMonth;\n\n  // Outbound assumes each GET operation transfers one average-sized object\n  const outboundGBPerProject = getOperationsPerProject * avgDataObjectSizeMB / 1024;\n  // -----------------------------------------------------\n\n  const monthlyCosts = [];\n  const monthlyData = {\n    storageCosts: [],\n    transactionCosts: [],\n    outboundCosts: [],\n    totalCosts: [],\n    // Detailed breakdown for potential future use or debugging\n    storageHotCosts: [],\n    storageCoolCosts: [],\n    storageArchiveCosts: [],\n    transactionReadCosts: [],\n    transactionWriteCosts: []\n  };\n  let cumulativeProjectData = []; // Tracks { monthAdded, projectCount }\n\n  for (let month = 1; month <= monthsToCalculate; month++) {\n    // --- Monthly Activity ---\n    const newProjectsThisMonth = numUsers * projectsPerUserPerMonth;\n    if (newProjectsThisMonth > 0) {\n      cumulativeProjectData.push({\n        monthAdded: month,\n        projectCount: newProjectsThisMonth\n      });\n    }\n\n    // --- Tier Distribution ---\n    let hotTierGB = 0;\n    let coolTierGB = 0;\n    let archiveTierGB = 0;\n    cumulativeProjectData.forEach(batch => {\n      const ageInMonths = month - batch.monthAdded + 1;\n      const batchSizeGB = batch.projectCount * projectSizeGB;\n      if (ageInMonths <= validHotTierMonths) {\n        hotTierGB += batchSizeGB;\n      } else if (ageInMonths <= validHotTierMonths + validCoolTierMonths) {\n        coolTierGB += batchSizeGB;\n      } else if (ageInMonths <= validHotTierMonths + validCoolTierMonths + validArchiveTierMonths) {\n        archiveTierGB += batchSizeGB;\n      }\n      // Projects older than retention period are implicitly ignored (zero cost)\n    });\n\n    // --- Cost Calculations ---\n\n    // Storage Costs - Use the provided pricing\n    const hotTierStorageCost = hotTierGB * pricing.storage.hotTier;\n    const coolTierStorageCost = coolTierGB * pricing.storage.coolTier;\n    const archiveTierStorageCost = archiveTierGB * pricing.storage.archiveTier;\n    const totalStorageCost = hotTierStorageCost + coolTierStorageCost + archiveTierStorageCost;\n\n    // Transaction Costs (for NEW projects this month)\n    // Assume reads happen only in the first (Hot) month for new projects\n    const getOperations = newProjectsThisMonth * getOperationsPerProject;\n    const getTransactionCost = getOperations * pricing.transactions.read; // Using simplified rate\n\n    // Assume writes happen when projects are created (Hot tier)\n    // Estimate: 1 write per data object + 1 for metadata/project setup? Adjust as needed.\n    const writeOperations = newProjectsThisMonth * (dataObjectsPerProject + 1);\n    const writeTransactionCost = writeOperations * pricing.transactions.write; // Using simplified rate\n\n    const totalTransactionCost = getTransactionCost + writeTransactionCost;\n\n    // Outbound Data Costs (for NEW projects this month)\n    const outboundGB = newProjectsThisMonth * outboundGBPerProject;\n    const billableOutboundGB = Math.max(0, outboundGB - pricing.dataTransfer.freeLimit);\n    const outboundCost = billableOutboundGB * pricing.dataTransfer.costPerGB;\n\n    // Total Cost for the Month\n    const totalMonthCost = totalStorageCost + totalTransactionCost + outboundCost;\n\n    // --- Store Monthly Results ---\n    monthlyData.storageCosts.push(totalStorageCost);\n    monthlyData.transactionCosts.push(totalTransactionCost);\n    monthlyData.outboundCosts.push(outboundCost);\n    monthlyData.totalCosts.push(totalMonthCost);\n    // Store breakdown\n    monthlyData.storageHotCosts.push(hotTierStorageCost);\n    monthlyData.storageCoolCosts.push(coolTierStorageCost);\n    monthlyData.storageArchiveCosts.push(archiveTierStorageCost);\n    monthlyData.transactionReadCosts.push(getTransactionCost);\n    monthlyData.transactionWriteCosts.push(writeTransactionCost);\n\n    // Optional: Detailed monthly breakdown (can be large)\n    monthlyCosts.push({\n      month,\n      storage: {\n        hot: hotTierStorageCost,\n        cool: coolTierStorageCost,\n        archive: archiveTierStorageCost,\n        total: totalStorageCost\n      },\n      transactions: {\n        read: getTransactionCost,\n        write: writeTransactionCost,\n        total: totalTransactionCost\n      },\n      outbound: {\n        totalGB: outboundGB,\n        cost: outboundCost\n      },\n      totalCost: totalMonthCost\n    });\n  }\n\n  // Calculate Cumulative Costs\n  const cumulativeTotalCosts = monthlyData.totalCosts.reduce((acc, cost) => {\n    const lastTotal = acc.length > 0 ? acc[acc.length - 1] : 0;\n    acc.push(lastTotal + cost);\n    return acc;\n  }, []);\n  return {\n    monthlyCosts,\n    // Detailed breakdown per month (optional)\n    monthlyData,\n    // Aggregated data arrays for charting\n    cumulativeTotalCosts\n  };\n};","map":{"version":3,"names":["DEFAULT_PRICING","storage","hotTier","coolTier","archiveTier","transactions","write","read","dataTransfer","freeLimit","costPerGB","calculateCosts","params","monthsToCalculate","pricing","console","error","monthlyCosts","monthlyData","storageCosts","transactionCosts","outboundCosts","totalCosts","cumulativeTotalCosts","numUsers","projectsPerUserPerMonth","dataObjectsPerProject","avgDataObjectSizeMB","getsPerImageInFirstMonth","hotTierMonths","coolTierMonths","archiveTierMonths","validHotTierMonths","Math","max","floor","validCoolTierMonths","validArchiveTierMonths","projectSizeGB","getOperationsPerProject","outboundGBPerProject","storageHotCosts","storageCoolCosts","storageArchiveCosts","transactionReadCosts","transactionWriteCosts","cumulativeProjectData","month","newProjectsThisMonth","push","monthAdded","projectCount","hotTierGB","coolTierGB","archiveTierGB","forEach","batch","ageInMonths","batchSizeGB","hotTierStorageCost","coolTierStorageCost","archiveTierStorageCost","totalStorageCost","getOperations","getTransactionCost","writeOperations","writeTransactionCost","totalTransactionCost","outboundGB","billableOutboundGB","outboundCost","totalMonthCost","hot","cool","archive","total","outbound","totalGB","cost","totalCost","reduce","acc","lastTotal","length"],"sources":["/Users/Joo/01_Projects/blob_costs/src/utils/costCalculator.js"],"sourcesContent":["// Azure Blob Storage pricing constants (in EUR)\nexport const DEFAULT_PRICING = {\n  storage: {\n    hotTier: 0.02, // EUR per GB per month\n    coolTier: 0.012, // EUR per GB per month\n    archiveTier: 0.001, // EUR per GB per month\n  },\n  transactions: {\n    write: 0.05 / 10000, // EUR per 10,000 operations (using Hot tier cost)\n    read: 0.004 / 10000, // EUR per 10,000 operations (using Hot tier cost)\n  },\n  dataTransfer: {\n    freeLimit: 100, // GB per month\n    costPerGB: 0.087, // EUR per GB\n  },\n};\n\n/**\n * Calculate Azure Blob Storage costs based on scenario parameters\n * @param {Object} params - Scenario parameters\n * @param {number} monthsToCalculate - Number of months to calculate costs for\n * @param {Object} pricing - Optional custom pricing model (defaults to DEFAULT_PRICING)\n * @returns {Object} Monthly costs and aggregated costs\n */\nexport const calculateCosts = (params, monthsToCalculate = 24, pricing = DEFAULT_PRICING) => {\n  // --- Input Validation ---\n  if (!params) {\n    console.error(\"calculateCosts called with invalid parameters:\", params);\n    // Return default empty structure to prevent crashes downstream\n    return { \n      monthlyCosts: [], \n      monthlyData: { storageCosts: [], transactionCosts: [], outboundCosts: [], totalCosts: [] }, \n      cumulativeTotalCosts: [] \n    };\n  }\n  \n  const {\n    numUsers = 0, // Default values to prevent NaN errors\n    projectsPerUserPerMonth = 0,\n    // --- Simplified Parameters ---\n    dataObjectsPerProject = 0,\n    avgDataObjectSizeMB = 0,\n    // ---------------------------\n    getsPerImageInFirstMonth = 0, // Consider renaming this parameter\n    hotTierMonths = 1,\n    coolTierMonths = 3,\n    archiveTierMonths = 9, // Use the value from params\n  } = params;\n  \n  // Ensure tier months are non-negative integers\n  const validHotTierMonths = Math.max(1, Math.floor(hotTierMonths)); // Hot must be at least 1\n  const validCoolTierMonths = Math.max(0, Math.floor(coolTierMonths));\n  const validArchiveTierMonths = Math.max(0, Math.floor(archiveTierMonths));\n\n\n  // --- Calculations based on Simplified Parameters ---\n  const projectSizeGB = (dataObjectsPerProject * avgDataObjectSizeMB) / 1024;\n  \n  // Calculate GET operations for a single project in its first month\n  // Note: 'getsPerImageInFirstMonth' needs context adjustment if it's per *object* now\n  const getOperationsPerProject = dataObjectsPerProject * getsPerImageInFirstMonth;\n  \n  // Outbound assumes each GET operation transfers one average-sized object\n  const outboundGBPerProject = (getOperationsPerProject * avgDataObjectSizeMB) / 1024;\n  // -----------------------------------------------------\n\n  const monthlyCosts = [];\n  const monthlyData = {\n    storageCosts: [],\n    transactionCosts: [],\n    outboundCosts: [],\n    totalCosts: [],\n    // Detailed breakdown for potential future use or debugging\n    storageHotCosts: [],\n    storageCoolCosts: [],\n    storageArchiveCosts: [],\n    transactionReadCosts: [],\n    transactionWriteCosts: [],\n  };\n  \n  let cumulativeProjectData = []; // Tracks { monthAdded, projectCount }\n\n  for (let month = 1; month <= monthsToCalculate; month++) {\n    // --- Monthly Activity ---\n    const newProjectsThisMonth = numUsers * projectsPerUserPerMonth;\n    if (newProjectsThisMonth > 0) {\n       cumulativeProjectData.push({ monthAdded: month, projectCount: newProjectsThisMonth });\n    }\n    \n    // --- Tier Distribution ---\n    let hotTierGB = 0;\n    let coolTierGB = 0;\n    let archiveTierGB = 0;\n\n    cumulativeProjectData.forEach(batch => {\n      const ageInMonths = month - batch.monthAdded + 1;\n      const batchSizeGB = batch.projectCount * projectSizeGB;\n\n      if (ageInMonths <= validHotTierMonths) {\n        hotTierGB += batchSizeGB;\n      } else if (ageInMonths <= validHotTierMonths + validCoolTierMonths) {\n        coolTierGB += batchSizeGB;\n      } else if (ageInMonths <= validHotTierMonths + validCoolTierMonths + validArchiveTierMonths) {\n        archiveTierGB += batchSizeGB;\n      }\n      // Projects older than retention period are implicitly ignored (zero cost)\n    });\n\n    // --- Cost Calculations ---\n    \n    // Storage Costs - Use the provided pricing\n    const hotTierStorageCost = hotTierGB * pricing.storage.hotTier;\n    const coolTierStorageCost = coolTierGB * pricing.storage.coolTier;\n    const archiveTierStorageCost = archiveTierGB * pricing.storage.archiveTier;\n    const totalStorageCost = hotTierStorageCost + coolTierStorageCost + archiveTierStorageCost;\n    \n    // Transaction Costs (for NEW projects this month)\n    // Assume reads happen only in the first (Hot) month for new projects\n    const getOperations = newProjectsThisMonth * getOperationsPerProject;\n    const getTransactionCost = getOperations * pricing.transactions.read; // Using simplified rate\n    \n    // Assume writes happen when projects are created (Hot tier)\n    // Estimate: 1 write per data object + 1 for metadata/project setup? Adjust as needed.\n    const writeOperations = newProjectsThisMonth * (dataObjectsPerProject + 1); \n    const writeTransactionCost = writeOperations * pricing.transactions.write; // Using simplified rate\n    \n    const totalTransactionCost = getTransactionCost + writeTransactionCost;\n    \n    // Outbound Data Costs (for NEW projects this month)\n    const outboundGB = newProjectsThisMonth * outboundGBPerProject;\n    const billableOutboundGB = Math.max(0, outboundGB - pricing.dataTransfer.freeLimit);\n    const outboundCost = billableOutboundGB * pricing.dataTransfer.costPerGB;\n    \n    // Total Cost for the Month\n    const totalMonthCost = totalStorageCost + totalTransactionCost + outboundCost;\n    \n    // --- Store Monthly Results ---\n    monthlyData.storageCosts.push(totalStorageCost);\n    monthlyData.transactionCosts.push(totalTransactionCost);\n    monthlyData.outboundCosts.push(outboundCost);\n    monthlyData.totalCosts.push(totalMonthCost);\n    // Store breakdown\n    monthlyData.storageHotCosts.push(hotTierStorageCost);\n    monthlyData.storageCoolCosts.push(coolTierStorageCost);\n    monthlyData.storageArchiveCosts.push(archiveTierStorageCost);\n    monthlyData.transactionReadCosts.push(getTransactionCost);\n    monthlyData.transactionWriteCosts.push(writeTransactionCost);\n\n    // Optional: Detailed monthly breakdown (can be large)\n    monthlyCosts.push({\n      month,\n      storage: { hot: hotTierStorageCost, cool: coolTierStorageCost, archive: archiveTierStorageCost, total: totalStorageCost },\n      transactions: { read: getTransactionCost, write: writeTransactionCost, total: totalTransactionCost },\n      outbound: { totalGB: outboundGB, cost: outboundCost },\n      totalCost: totalMonthCost,\n    });\n  }\n  \n  // Calculate Cumulative Costs\n  const cumulativeTotalCosts = monthlyData.totalCosts.reduce((acc, cost) => {\n    const lastTotal = acc.length > 0 ? acc[acc.length - 1] : 0;\n    acc.push(lastTotal + cost);\n    return acc;\n  }, []);\n  \n  return {\n    monthlyCosts, // Detailed breakdown per month (optional)\n    monthlyData,  // Aggregated data arrays for charting\n    cumulativeTotalCosts,\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}