{"ast":null,"code":"var _jsxFileName = \"/Users/Joo/01_Projects/blob_costs/src/components/CostChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardContent, Typography, FormControl, Select, MenuItem, InputLabel, Stack, TextField, ToggleButtonGroup, ToggleButton, FormControlLabel, Switch } from '@mui/material';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useScenariosContext } from '../contexts/ScenariosContext';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, Filler);\nconst CostChart = () => {\n  _s();\n  const {\n    scenarios,\n    calculatedData,\n    monthRange,\n    updateMonthRange\n  } = useScenariosContext();\n  const [chartType, setChartType] = useState('line');\n  const [dataType, setDataType] = useState('monthly');\n  const [costBreakdown, setCostBreakdown] = useState(false);\n  const handleChartTypeChange = (_, newType) => {\n    if (newType !== null) {\n      setChartType(newType);\n    }\n  };\n  const handleDataTypeChange = (_, newType) => {\n    if (newType !== null) {\n      setDataType(newType);\n    }\n  };\n  const handleMonthRangeChange = event => {\n    updateMonthRange(Number(event.target.value));\n  };\n  const getChartData = () => {\n    const labels = Array.from({\n      length: monthRange\n    }, (_, i) => `Month ${i + 1}`);\n\n    // Filter visible scenarios\n    const visibleScenarios = scenarios.filter(s => s.visible !== false);\n    if (costBreakdown && visibleScenarios.length === 1) {\n      // Single scenario cost breakdown\n      const scenario = visibleScenarios[0];\n      const scenarioData = calculatedData[scenario.id];\n      if (!scenarioData) return {\n        labels: [],\n        datasets: []\n      };\n      return {\n        labels,\n        datasets: [{\n          label: 'Storage Costs',\n          data: scenarioData.monthlyData.storageCosts,\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }, {\n          label: 'Transaction Costs',\n          data: scenarioData.monthlyData.transactionCosts,\n          backgroundColor: 'rgba(255, 99, 132, 0.6)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 1\n        }, {\n          label: 'Outbound Transfer Costs',\n          data: scenarioData.monthlyData.outboundCosts,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n    } else {\n      // Multiple scenarios comparison\n      const datasets = visibleScenarios.map(scenario => {\n        const scenarioData = calculatedData[scenario.id];\n        if (!scenarioData) return null;\n        return {\n          label: scenario.name,\n          data: dataType === 'cumulative' ? scenarioData.cumulativeTotalCosts : scenarioData.monthlyData.totalCosts,\n          borderColor: scenario.color,\n          backgroundColor: `${scenario.color}33`,\n          // Add transparency\n          borderWidth: scenario.active ? 3 : 2,\n          pointRadius: scenario.active ? 4 : 3,\n          fill: chartType === 'area',\n          tension: 0.2\n        };\n      }).filter(Boolean);\n      return {\n        labels,\n        datasets\n      };\n    }\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Cost (EUR)'\n        }\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: costBreakdown ? 'Cost Breakdown by Category' : dataType === 'cumulative' ? 'Cumulative Storage Costs Over Time' : 'Monthly Storage Costs Over Time'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: â‚¬${context.parsed.y.toFixed(2)}`;\n          }\n        }\n      }\n    }\n  };\n\n  // Prepare the chart data\n  const chartData = getChartData();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    elevation: 3,\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h2\",\n          children: \"Cost Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            size: \"small\",\n            sx: {\n              minWidth: 120\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"month-range-label\",\n              children: \"Months\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"month-range-label\",\n              id: \"month-range-select\",\n              value: monthRange,\n              label: \"Months\",\n              onChange: handleMonthRangeChange,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: 12,\n                children: \"12 Months\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: 24,\n                children: \"24 Months\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: 36,\n                children: \"36 Months\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: 48,\n                children: \"48 Months\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: 60,\n                children: \"60 Months\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n            value: chartType,\n            exclusive: true,\n            onChange: handleChartTypeChange,\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"line\",\n              children: \"Line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"area\",\n              children: \"Area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"bar\",\n              children: \"Bar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n            value: dataType,\n            exclusive: true,\n            onChange: handleDataTypeChange,\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"monthly\",\n              children: \"Monthly\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n              value: \"cumulative\",\n              children: \"Cumulative\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), visibleScenarios.length === 1 && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: /*#__PURE__*/_jsxDEV(Switch, {\n          checked: costBreakdown,\n          onChange: () => setCostBreakdown(!costBreakdown)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this),\n        label: \"Show Cost Breakdown\",\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"chart-container\",\n        sx: {\n          height: 400\n        },\n        children: chartType === 'bar' ? /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(CostChart, \"suPjQ07QubALS4qfzKNAD8HzTK0=\", false, function () {\n  return [useScenariosContext];\n});\n_c = CostChart;\nexport default CostChart;\nvar _c;\n$RefreshReg$(_c, \"CostChart\");","map":{"version":3,"names":["React","useState","useEffect","Box","Card","CardContent","Typography","FormControl","Select","MenuItem","InputLabel","Stack","TextField","ToggleButtonGroup","ToggleButton","FormControlLabel","Switch","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Filler","Line","Bar","useScenariosContext","jsxDEV","_jsxDEV","register","CostChart","_s","scenarios","calculatedData","monthRange","updateMonthRange","chartType","setChartType","dataType","setDataType","costBreakdown","setCostBreakdown","handleChartTypeChange","_","newType","handleDataTypeChange","handleMonthRangeChange","event","Number","target","value","getChartData","labels","Array","from","length","i","visibleScenarios","filter","s","visible","scenario","scenarioData","id","datasets","label","data","monthlyData","storageCosts","backgroundColor","borderColor","borderWidth","transactionCosts","outboundCosts","map","name","cumulativeTotalCosts","totalCosts","color","active","pointRadius","fill","tension","Boolean","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","x","plugins","legend","position","tooltip","callbacks","context","dataset","parsed","toFixed","chartData","elevation","children","sx","justifyContent","alignItems","mb","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","direction","xs","sm","spacing","size","minWidth","labelId","onChange","exclusive","control","checked","className","height","options","_c","$RefreshReg$"],"sources":["/Users/Joo/01_Projects/blob_costs/src/components/CostChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Card, \n  CardContent, \n  Typography, \n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n  Stack,\n  TextField,\n  ToggleButtonGroup,\n  ToggleButton,\n  FormControlLabel,\n  Switch\n} from '@mui/material';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useScenariosContext } from '../contexts/ScenariosContext';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst CostChart = () => {\n  const { scenarios, calculatedData, monthRange, updateMonthRange } = useScenariosContext();\n  const [chartType, setChartType] = useState('line');\n  const [dataType, setDataType] = useState('monthly');\n  const [costBreakdown, setCostBreakdown] = useState(false);\n  \n  const handleChartTypeChange = (_, newType) => {\n    if (newType !== null) {\n      setChartType(newType);\n    }\n  };\n  \n  const handleDataTypeChange = (_, newType) => {\n    if (newType !== null) {\n      setDataType(newType);\n    }\n  };\n  \n  const handleMonthRangeChange = (event) => {\n    updateMonthRange(Number(event.target.value));\n  };\n  \n  const getChartData = () => {\n    const labels = Array.from({ length: monthRange }, (_, i) => `Month ${i + 1}`);\n    \n    // Filter visible scenarios\n    const visibleScenarios = scenarios.filter(s => s.visible !== false);\n    \n    if (costBreakdown && visibleScenarios.length === 1) {\n      // Single scenario cost breakdown\n      const scenario = visibleScenarios[0];\n      const scenarioData = calculatedData[scenario.id];\n      \n      if (!scenarioData) return { labels: [], datasets: [] };\n      \n      return {\n        labels,\n        datasets: [\n          {\n            label: 'Storage Costs',\n            data: scenarioData.monthlyData.storageCosts,\n            backgroundColor: 'rgba(54, 162, 235, 0.6)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1,\n          },\n          {\n            label: 'Transaction Costs',\n            data: scenarioData.monthlyData.transactionCosts,\n            backgroundColor: 'rgba(255, 99, 132, 0.6)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1,\n          },\n          {\n            label: 'Outbound Transfer Costs',\n            data: scenarioData.monthlyData.outboundCosts,\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1,\n          },\n        ],\n      };\n    } else {\n      // Multiple scenarios comparison\n      const datasets = visibleScenarios.map(scenario => {\n        const scenarioData = calculatedData[scenario.id];\n        if (!scenarioData) return null;\n        \n        return {\n          label: scenario.name,\n          data: dataType === 'cumulative' \n            ? scenarioData.cumulativeTotalCosts \n            : scenarioData.monthlyData.totalCosts,\n          borderColor: scenario.color,\n          backgroundColor: `${scenario.color}33`, // Add transparency\n          borderWidth: scenario.active ? 3 : 2,\n          pointRadius: scenario.active ? 4 : 3,\n          fill: chartType === 'area',\n          tension: 0.2,\n        };\n      }).filter(Boolean);\n      \n      return {\n        labels,\n        datasets,\n      };\n    }\n  };\n  \n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Cost (EUR)',\n        },\n      },\n      x: {\n        title: {\n          display: true,\n          text: 'Month',\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: costBreakdown \n          ? 'Cost Breakdown by Category'\n          : (dataType === 'cumulative' \n              ? 'Cumulative Storage Costs Over Time' \n              : 'Monthly Storage Costs Over Time'),\n      },\n      tooltip: {\n        callbacks: {\n          label: function(context) {\n            return `${context.dataset.label}: â‚¬${context.parsed.y.toFixed(2)}`;\n          }\n        }\n      }\n    },\n  };\n  \n  // Prepare the chart data\n  const chartData = getChartData();\n  \n  return (\n    <Card elevation={3}>\n      <CardContent>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h5\" component=\"h2\">\n            Cost Visualization\n          </Typography>\n          \n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n              <InputLabel id=\"month-range-label\">Months</InputLabel>\n              <Select\n                labelId=\"month-range-label\"\n                id=\"month-range-select\"\n                value={monthRange}\n                label=\"Months\"\n                onChange={handleMonthRangeChange}\n              >\n                <MenuItem value={12}>12 Months</MenuItem>\n                <MenuItem value={24}>24 Months</MenuItem>\n                <MenuItem value={36}>36 Months</MenuItem>\n                <MenuItem value={48}>48 Months</MenuItem>\n                <MenuItem value={60}>60 Months</MenuItem>\n              </Select>\n            </FormControl>\n            \n            <ToggleButtonGroup\n              value={chartType}\n              exclusive\n              onChange={handleChartTypeChange}\n              size=\"small\"\n            >\n              <ToggleButton value=\"line\">Line</ToggleButton>\n              <ToggleButton value=\"area\">Area</ToggleButton>\n              <ToggleButton value=\"bar\">Bar</ToggleButton>\n            </ToggleButtonGroup>\n            \n            <ToggleButtonGroup\n              value={dataType}\n              exclusive\n              onChange={handleDataTypeChange}\n              size=\"small\"\n            >\n              <ToggleButton value=\"monthly\">Monthly</ToggleButton>\n              <ToggleButton value=\"cumulative\">Cumulative</ToggleButton>\n            </ToggleButtonGroup>\n          </Stack>\n        </Box>\n        \n        {visibleScenarios.length === 1 && (\n          <FormControlLabel\n            control={\n              <Switch \n                checked={costBreakdown} \n                onChange={() => setCostBreakdown(!costBreakdown)} \n              />\n            }\n            label=\"Show Cost Breakdown\"\n            sx={{ mb: 2 }}\n          />\n        )}\n        \n        <Box className=\"chart-container\" sx={{ height: 400 }}>\n          {chartType === 'bar' ? (\n            <Bar data={chartData} options={chartOptions} />\n          ) : (\n            <Line data={chartData} options={chartOptions} />\n          )}\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CostChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}