{"ast":null,"code":"var _jsxFileName = \"/Users/Joo/01_Projects/blob_costs/src/contexts/ScenariosContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { calculateCosts } from '../utils/costCalculator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScenariosContext = /*#__PURE__*/createContext();\nexport const useScenariosContext = () => {\n  _s();\n  return useContext(ScenariosContext);\n};\n_s(useScenariosContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ScenariosProvider = ({\n  children\n}) => {\n  _s2();\n  const [scenarios, setScenarios] = useState(() => {\n    const savedScenarios = localStorage.getItem('blobCostScenarios');\n    return savedScenarios ? JSON.parse(savedScenarios) : [{\n      id: 'default-scenario',\n      name: 'Default Scenario',\n      description: 'Basic scenario with default parameters',\n      parameters: {\n        numUsers: 100,\n        projectsPerUserPerMonth: 4,\n        imagesPerProject: 100,\n        thumbnailSizeMB: 0.1,\n        mediumSizeMB: 0.8,\n        hdSizeMB: 2.5,\n        hdImagesPerProject: 10,\n        getsPerImageInFirstMonth: 15,\n        hotTierMonths: 1,\n        coolTierMonths: 3,\n        archiveTierMonths: 9\n      },\n      active: true,\n      color: '#0078d4'\n    }];\n  });\n  const [monthRange, setMonthRange] = useState(24); // Default to 24 months (2 years)\n\n  // Precalculated monthly costs for all scenarios\n  const [calculatedData, setCalculatedData] = useState({});\n\n  // Save scenarios to localStorage\n  useEffect(() => {\n    localStorage.setItem('blobCostScenarios', JSON.stringify(scenarios));\n\n    // Recalculate costs for all scenarios\n    const newCalculatedData = {};\n    scenarios.forEach(scenario => {\n      newCalculatedData[scenario.id] = calculateCosts(scenario.parameters, monthRange);\n    });\n    setCalculatedData(newCalculatedData);\n  }, [scenarios, monthRange]);\n\n  // Add a new scenario\n  const addScenario = scenario => {\n    const newScenario = {\n      id: uuidv4(),\n      active: true,\n      color: getRandomColor(),\n      ...scenario\n    };\n\n    // Set all other scenarios to inactive\n    setScenarios(prev => prev.map(s => ({\n      ...s,\n      active: false\n    })).concat(newScenario));\n  };\n\n  // Update an existing scenario\n  const updateScenario = (id, updates) => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      ...updates\n    } : scenario));\n  };\n\n  // Delete a scenario\n  const deleteScenario = id => {\n    setScenarios(prev => prev.filter(scenario => scenario.id !== id));\n  };\n\n  // Set a scenario as active (for highlighting in the chart)\n  const setActiveScenario = id => {\n    setScenarios(prev => prev.map(scenario => ({\n      ...scenario,\n      active: scenario.id === id\n    })));\n  };\n\n  // Toggle a scenario's visibility in the chart\n  const toggleScenarioVisibility = id => {\n    setScenarios(prev => prev.map(scenario => scenario.id === id ? {\n      ...scenario,\n      visible: scenario.visible === false ? true : false\n    } : scenario));\n  };\n\n  // Get a random color for new scenarios\n  const getRandomColor = () => {\n    const colors = ['#0078d4',\n    // Azure blue\n    '#50e6ff',\n    // Azure light blue\n    '#773adc',\n    // Purple\n    '#ff8c00',\n    // Orange\n    '#107c10',\n    // Green\n    '#d83b01',\n    // Red/Orange\n    '#599b2d',\n    // Green/Yellow\n    '#00b7c3' // Teal\n    ];\n\n    // Avoid using colors already in use if possible\n    const usedColors = scenarios.map(s => s.color);\n    const availableColors = colors.filter(c => !usedColors.includes(c));\n    if (availableColors.length > 0) {\n      return availableColors[Math.floor(Math.random() * availableColors.length)];\n    }\n\n    // If all colors are used, just pick a random one\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  // Update the month range for calculations\n  const updateMonthRange = range => {\n    setMonthRange(range);\n  };\n  const value = {\n    scenarios,\n    calculatedData,\n    monthRange,\n    addScenario,\n    updateScenario,\n    deleteScenario,\n    setActiveScenario,\n    toggleScenarioVisibility,\n    updateMonthRange\n  };\n  return /*#__PURE__*/_jsxDEV(ScenariosContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s2(ScenariosProvider, \"odU4/bl+BtQq9oKbxAEssgyiwd8=\");\n_c = ScenariosProvider;\nvar _c;\n$RefreshReg$(_c, \"ScenariosProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","v4","uuidv4","calculateCosts","jsxDEV","_jsxDEV","ScenariosContext","useScenariosContext","_s","ScenariosProvider","children","_s2","scenarios","setScenarios","savedScenarios","localStorage","getItem","JSON","parse","id","name","description","parameters","numUsers","projectsPerUserPerMonth","imagesPerProject","thumbnailSizeMB","mediumSizeMB","hdSizeMB","hdImagesPerProject","getsPerImageInFirstMonth","hotTierMonths","coolTierMonths","archiveTierMonths","active","color","monthRange","setMonthRange","calculatedData","setCalculatedData","setItem","stringify","newCalculatedData","forEach","scenario","addScenario","newScenario","getRandomColor","prev","map","s","concat","updateScenario","updates","deleteScenario","filter","setActiveScenario","toggleScenarioVisibility","visible","colors","usedColors","availableColors","c","includes","length","Math","floor","random","updateMonthRange","range","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Joo/01_Projects/blob_costs/src/contexts/ScenariosContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { calculateCosts } from '../utils/costCalculator';\n\nconst ScenariosContext = createContext();\n\nexport const useScenariosContext = () => useContext(ScenariosContext);\n\nexport const ScenariosProvider = ({ children }) => {\n  const [scenarios, setScenarios] = useState(() => {\n    const savedScenarios = localStorage.getItem('blobCostScenarios');\n    return savedScenarios ? JSON.parse(savedScenarios) : [\n      {\n        id: 'default-scenario',\n        name: 'Default Scenario',\n        description: 'Basic scenario with default parameters',\n        parameters: {\n          numUsers: 100,\n          projectsPerUserPerMonth: 4,\n          imagesPerProject: 100,\n          thumbnailSizeMB: 0.1,\n          mediumSizeMB: 0.8,\n          hdSizeMB: 2.5,\n          hdImagesPerProject: 10,\n          getsPerImageInFirstMonth: 15,\n          hotTierMonths: 1,\n          coolTierMonths: 3,\n          archiveTierMonths: 9\n        },\n        active: true,\n        color: '#0078d4'\n      }\n    ];\n  });\n  \n  const [monthRange, setMonthRange] = useState(24); // Default to 24 months (2 years)\n  \n  // Precalculated monthly costs for all scenarios\n  const [calculatedData, setCalculatedData] = useState({});\n  \n  // Save scenarios to localStorage\n  useEffect(() => {\n    localStorage.setItem('blobCostScenarios', JSON.stringify(scenarios));\n    \n    // Recalculate costs for all scenarios\n    const newCalculatedData = {};\n    scenarios.forEach(scenario => {\n      newCalculatedData[scenario.id] = calculateCosts(scenario.parameters, monthRange);\n    });\n    setCalculatedData(newCalculatedData);\n  }, [scenarios, monthRange]);\n  \n  // Add a new scenario\n  const addScenario = (scenario) => {\n    const newScenario = {\n      id: uuidv4(),\n      active: true,\n      color: getRandomColor(),\n      ...scenario\n    };\n    \n    // Set all other scenarios to inactive\n    setScenarios(prev => \n      prev.map(s => ({ ...s, active: false })).concat(newScenario)\n    );\n  };\n  \n  // Update an existing scenario\n  const updateScenario = (id, updates) => {\n    setScenarios(prev => \n      prev.map(scenario => \n        scenario.id === id ? { ...scenario, ...updates } : scenario\n      )\n    );\n  };\n  \n  // Delete a scenario\n  const deleteScenario = (id) => {\n    setScenarios(prev => prev.filter(scenario => scenario.id !== id));\n  };\n  \n  // Set a scenario as active (for highlighting in the chart)\n  const setActiveScenario = (id) => {\n    setScenarios(prev => \n      prev.map(scenario => ({\n        ...scenario,\n        active: scenario.id === id\n      }))\n    );\n  };\n  \n  // Toggle a scenario's visibility in the chart\n  const toggleScenarioVisibility = (id) => {\n    setScenarios(prev => \n      prev.map(scenario => \n        scenario.id === id \n          ? { ...scenario, visible: scenario.visible === false ? true : false } \n          : scenario\n      )\n    );\n  };\n  \n  // Get a random color for new scenarios\n  const getRandomColor = () => {\n    const colors = [\n      '#0078d4', // Azure blue\n      '#50e6ff', // Azure light blue\n      '#773adc', // Purple\n      '#ff8c00', // Orange\n      '#107c10', // Green\n      '#d83b01', // Red/Orange\n      '#599b2d', // Green/Yellow\n      '#00b7c3', // Teal\n    ];\n    \n    // Avoid using colors already in use if possible\n    const usedColors = scenarios.map(s => s.color);\n    const availableColors = colors.filter(c => !usedColors.includes(c));\n    \n    if (availableColors.length > 0) {\n      return availableColors[Math.floor(Math.random() * availableColors.length)];\n    }\n    \n    // If all colors are used, just pick a random one\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n  \n  // Update the month range for calculations\n  const updateMonthRange = (range) => {\n    setMonthRange(range);\n  };\n  \n  const value = {\n    scenarios,\n    calculatedData,\n    monthRange,\n    addScenario,\n    updateScenario,\n    deleteScenario,\n    setActiveScenario,\n    toggleScenarioVisibility,\n    updateMonthRange\n  };\n  \n  return (\n    <ScenariosContext.Provider value={value}>\n      {children}\n    </ScenariosContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}